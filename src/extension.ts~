// ðŸŽ¸ Workenizer
// ROW ROW ROW your CODE, into a bitstream...
// Merrily, merrily, merrily, merrily â€” life is but a scheme.
// For those about to rock... we salute your layout.
// Automatically arranges VS Code workspace folders into structured row layouts

// File: src/extension.ts
import * as vscode from 'vscode';

export function activate(context: vscode.ExtensionContext) {
  vscode.window.setStatusBarMessage('ðŸŽ¸ Workenizer engaged. Prepare for row alignment.', 5000);

  const disposable = vscode.commands.registerCommand('workenizer.arrangeRows', async () => {
    const folders = vscode.workspace.workspaceFolders;
    if (!folders || folders.length === 0) {
      vscode.window.showErrorMessage('No workspace folders found.');
      return;
    }

    const sorted = folders.slice().sort((a, b) => a.name.localeCompare(b.name));

    await vscode.commands.executeCommand('workbench.action.closeAllEditors');

    for (const folder of sorted) {
      const mainPath = vscode.Uri.joinPath(folder.uri, 'main.sh');
      const readmePath = vscode.Uri.joinPath(folder.uri, 'README.md');

      try {
        const mainDoc = await vscode.workspace.openTextDocument(mainPath);
        const readmeDoc = await vscode.workspace.openTextDocument(readmePath);

        // Open main.sh
        await vscode.window.showTextDocument(mainDoc, { viewColumn: vscode.ViewColumn.One, preview: false });
        // Open README.md (editable)
        await vscode.window.showTextDocument(readmeDoc, { viewColumn: vscode.ViewColumn.One, preview: false });
        // Reopen README.md in preview to the side
        await vscode.commands.executeCommand('markdown.showPreviewToSide');
      } catch (err: any) {
        vscode.window.showWarningMessage(`Skipping ${folder.name}: ${err.message}`);
      }
    }
  });

  context.subscriptions.push(disposable);
}

export function deactivate() {}
